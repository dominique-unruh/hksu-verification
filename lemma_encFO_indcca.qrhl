# indcca_encFO_0_game0FO: abs (indcca_encFO_0-game0FO) â‰¤ abs (PRF_real-PRF_ideal)
include "lemma_indcca_encFO_0_game0FO.qrhl".

# game0FO_game1FO: Pr[b=1:game0FO(rho)] = Pr[b=1:game1FO(rho)].
include "lemma_game0FO_game1FO.qrhl".

# lemma game1FO_game2FO: | Pr[game1] - Pr[game2] | <= some expression
include "lemma_game1FO_game2FO.qrhl".

# lemma game2FO_game3FO: | Pr[game3] - Pr[game2] | <= DS advantage
include "lemma_game2FO_game3FO.qrhl".

# game3FO_game4FO_dist: abs ( Pr[b=1 : game3FO(rho)] - Pr[b=1 : game4FO(rho)] ) <= disjointnessT.
include "lemma_game3FO_game4FO_dist.qrhl".

# game4FO_game3FO': Pr[b=1 : game4FO(rho)] = Pr[b=1 : game3FO'(rho)].
include "lemma_game4FO_game3FO'.qrhl".

# The following lemmas are autogenerated from the similarly named ones above:

include "lemma_game2FO'_game3FO'.qrhl".
include "lemma_game1FO'_game2FO'.qrhl".
include "lemma_game0FO'_game1FO'.qrhl".
include "lemma_indcca_encFO_1_game0FO'.qrhl".

# GRAPH: RED("encFO_indcca","indcca_encFO_0","indcca_encFO_1", uses=["indcca_encFO_0_game0FO", "game0FO_game1FO", "game1FO_game2FO", "game2FO_game3FO", "game3FO_game4FO_dist", "game4FO_game3FO'", "game2FO'_game3FO'", "game1FO'_game2FO'", "game0FO'_game1FO'", "indcca_encFO_1_game0FO'"])

lemma encFO_indcca: abs( Pr[b=1: indcca_encFO_0(rho)] - Pr[b=1: indcca_encFO_1(rho)] ) <=

   abs ( Pr[b=1:PRF_real (rho)] - Pr[b=1:PRF_ideal (rho)] ) +
   abs ( Pr[b=1:PRF_real'(rho)] - Pr[b=1:PRF_ideal'(rho)] ) +

   abs(Pr[b=1 : ds_encT_real'(rho)] - Pr[b=1 : ds_encT_fake'(rho)]) +
   abs(Pr[b=1 : ds_encT_real (rho)] - Pr[b=1 : ds_encT_fake (rho)]) +

   disjointnessT +

   8 * sqrt( 4 * (1+real (qG+2*qH+qD+1))
                    * real (qG+2*qH+qD+1) * correctness params keygen enc dec msg_space)

   + 2 * correctness params keygen enc dec msg_space.

 rule abs_compute_step[OF indcca_encFO_0_game0FO].
 isa subst game0FO_game1FO.
 rule abs_compute_step[OF game1FO_game2FO].
 rule abs_compute_step[OF game2FO_game3FO].
 rule abs_compute_step[OF game3FO_game4FO_dist].
 isa subst game4FO_game3FO'.
 rule abs_compute_step[OF game2FO'_game3FO'[THEN flip_abs]].
 rule abs_compute_step[OF game1FO'_game2FO'[THEN flip_abs]].
 isa subst game0FO'_game1FO'[symmetric].
 rule abs_compute_step[OF indcca_encFO_1_game0FO'[THEN flip_abs]].
 rule abs_compute_end.

 simp.
qed.
