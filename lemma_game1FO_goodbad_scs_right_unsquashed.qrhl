include "game1FO_goodbad_scs_right.qrhl".
include "game1FO_goodbad_scs_right_unsquashed.qrhl".

# GRAPH: EQ("game1FO_goodbad_scs_right_unsquashed","game1FO_goodbad_scs_right","game1FO_goodbad_scs_right_unsquashed")
lemma game1FO_goodbad_scs_right_unsquashed: Pr[guess‚ààS:game1FO_goodbad_scs_right(rho)] = Pr[guess‚ààS:game1FO_goodbad_scs_right_unsquashed(rho)].
 byqrhl.
 inline game1FO_goodbad_scs_right.
 inline game1FO_goodbad_scs_right_unsquashed.

 # Adv_O2H_Game1FO
 equal.
  simp!.

 conseq post: Cla[z'1 = z'2 ‚àß gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß Kstar1 = Kstar2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß m'1 = m'2 ‚àß count1 = count2 ‚àß stop_at1 = stop_at2 ‚àß guess1 = guess2 ‚àß G1 = G2 & S1=S2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp!.
 
 # squash z',G,S
 squash right.
 squash right.

 rnd (S,G,z'), (z',G,S) <-
   map_distr (Œª(S,G,z'). ((S,G,z'), (z',G,S))) goodbad_scs_distr.

 conseq post: Cla[gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß Kstar1 = Kstar2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß m'1 = m'2 ‚àß count1 = count2 ‚àß stop_at1 = stop_at2 ‚àß guess1 = guess2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp! case_prod_beta squash_rnd1.

 rnd.
 wp 1 1.
 skip.
 simp!.
qed.
