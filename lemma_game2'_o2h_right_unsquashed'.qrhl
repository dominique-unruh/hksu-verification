# Autogenerated file (by replacing Adv_DS_encT -> Adv_DS_encT', etc. etc. in lemma_game2_o2h_right_unsquashed.qrhl)

include "o2h_right_unsquashed'.qrhl".
include "game2'.qrhl".

# GRAPH: EQ("game2'_o2h_right_unsquashed'","game2'","o2h_right_unsquashed'")
lemma game2'_o2h_right_unsquashed': Pr[b=1:game2'(rho)] = Pr[b=1:o2h_right_unsquashed'(rho)].
 byqrhl.
 inline game2'.
 inline o2h_right_unsquashed'.

 inline Adv_O2H'.

 # Strengthening the post-condition so that equal produces the correct subgoal.
 conseq post: Cla[b1=b2 ∧ G1=G'2].
  simp!.

 equal mid quantA, Hin, Hout, Gin, Gout.
 1-2: {
  simp!.
  inline queryG.
  inline Count.
  inline queryG'.  
  wp 1 2.
  skip.
  # Just "simp." would work instead of the following commands. But it takes very long.
  isa (use [[simp_depth_limit=1]] in ‹simp add: TERM›).
  isa (subst top_lift, simp)+.
  isa (use [[simp_depth_limit=0]] in ‹simp add: TERM›).
  isa (subst G2G2, simp).
  simp!.
 }

 conseq post: ℭ𝔩𝔞[G1 = G'2 ∧ in_cstar1 = in_cstar2 ∧ in_pk1 = in_pk2 ∧ classA1 = classA2 ∧ b1 = b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # G1, cstar1, in_pk1, in_cstar1
 # G'2, z2, S2, in_pk2, in_cstar2, pk2
 wp 4 5.
 conseq post: ℭ𝔩𝔞[classA1 = classA2 ∧ b1 = b2 & pk1=pk2 & rstar1=rstar2 & mstar1=mstar2 & G1=G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! fun_upd_def ext.

 # rstar
 rnd.
 conseq post: ℭ𝔩𝔞[classA1 = classA2 ∧ b1 = b2 & pk1=pk2 & mstar1=mstar2 & G1=G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # mstar1,mstar2
 rnd.
 conseq post: ℭ𝔩𝔞[classA1 = classA2 ∧ b1 = b2 & pk1=pk2 & G1=G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # pk,sk
 rnd.
 conseq post: ℭ𝔩𝔞[classA1 = classA2 ∧ b1 = b2 & G1=G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # count2, G
 rnd.
 wp right.
 skip.
 simp!.
qed.
