# Autogenerated file (by replacing game0FO -> game0FO', game1FO -> game1FO', etc. etc. in lemma_game2FO_goodbad_range.qrhl)

include "game2FO'_goodbad_range.qrhl".
include "game2FO'_goodbad_o2h_left_class.qrhl".

# GRAPH: EQ("game2FO'_goodbad_range","game2FO'_goodbad_range","game2FO'_goodbad_o2h_left_class")

lemma game2FO'_goodbad_range: Pr[b=1: game2FO'_goodbad_range(rho)] = Pr[b=1: game2FO'_goodbad_o2h_left_class(rho)].

 byqrhl.
 inline game2FO'_goodbad_o2h_left_class.
 inline game2FO'_goodbad_range.

 conseq post: Cla[gout1=gout2 & b1=b2 & cstar1=cstar2 & HqHr_match pk1 G1 Hq1 Hr1 Hq2 & sk1=sk2 & H01=H02 & pk1=pk2].
  simp!.

 # Adv_INDCCA_encFO
 equal mid quantA, Hin, Hout, Gin, Gout.
  simp!.

  # decapsQuery2_range ~ decapsQuery2
  inline decapsQuery2.
  inline decapsQuery2_range.

  conseq post: ‚Ñ≠ùî©ùîû[gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß c1 = c2 ‚àß K'1 = K'2 ‚àß b1 = b2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß Kstar1 = Kstar2 ‚àß G1 = G2 ‚àß H1 = H2] ‚äì ‚ü¶quantA1, Hin1, Hout1, Gin1, Gout1‚üß ‚â°ùîÆ ‚ü¶quantA2, Hin2, Hout2, Gin2, Gout2‚üß.
   isa! auto.

  # case "c=cstar"
  if joint.
   simp!.
  # K' <- None
  wp 1 1.
  skip.
  isa! auto.

  # case "c‚àâencrT G pk ` msg_space()"
  if left.
  wp 1 1.
  skip.
  isa! auto simp: HqHr_match_def.

  # case "c‚ààencrT G pk ` msg_space()"
  wp 1 1.
  skip.
  isa! auto simp: HqHr_match_def.

 # end of Adv_INDCCA_encFO


 # H
 wp 1 1.
 simp.
 conseq post: ‚Ñ≠ùî©ùîû[gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß Kstar1 = Kstar2 ‚àß G1 = G2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  isa! auto simp: HqHr_match_mk_Hq.

 # in_pk‚Äìgout
 equal 4.
  simp!.

 # Kstar
 rnd.
 conseq post: ‚Ñ≠ùî©ùîû[pk1 = pk2 ‚àß cstar1 = cstar2 ‚àß H01 = H02 ‚àß G1 = G2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß b1 = b2 & cstar1 ‚àà encrT G1 pk1 ` msg_space ()] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  isa! auto simp: HqHr_match_def.

 # gin, gout, cstar
 wp 3 3.
 conseq post: ‚Ñ≠ùî©ùîû[pk1 = pk2 ‚àß H01 = H02 ‚àß G1 = G2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß b1 = b2 & mstar1=mstar2 & mstar1 ‚àà msg_space ()] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp! encrT_def.

 # mstar
 rnd.
 conseq post: ‚Ñ≠ùî©ùîû[pk1 = pk2 ‚àß H01 = H02 ‚àß G1 = G2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß b1 = b2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp! msg_spaceT_def.

 # prfk
 wp 1 1.
 simp.
 # Does not change postcondition
 conseq post: ‚Ñ≠ùî©ùîû[pk1 = pk2 ‚àß H01 = H02 ‚àß G1 = G2 ‚àß cstar1 = cstar2 ‚àß HqHr_match pk1 G1 Hq1 Hr1 Hq2 ‚àß sk1 = sk2 ‚àß H01 = H02 ‚àß pk1 = pk2 ‚àß classA1 = classA2 ‚àß b1 = b2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp!.

 # Move H0 before Hr,Hq
 swap left 2 1.
 swap right 2 1.

 # Hq,Hr
 squash left.
 squash right.

 rnd (Hq,Hr), (Hq,Hr) <- HqHr_joint_pick pk1 G1.
 conseq post: ‚Ñ≠ùî©ùîû[sk1 = sk2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß H01 = H02 ‚àß gout1 = gout2 ‚àß G1 = G2 ‚àß pk1 = pk2 ‚àß cstar1 = cstar2 ‚àß Kstar1 = Kstar2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  isa! auto simp: HqHr_joint_pick_fst HqHr_joint_pick_snd HqHr_joint_pick_supp.

 equal all.
  simp!.

 skip.
 simp.
qed.
