include "game5.qrhl".
include "scs_left_unsquashed.qrhl".

# GRAPH: EQ("game5_scs_left_unsquashed","game5","scs_left_unsquashed")
lemma game5_scs_left_unsquashed: Pr[Find:game5(rho)] = Pr[Find:scs_left_unsquashed(rho)].
 byqrhl.
 inline game5.
 inline scs_left_unsquashed.

 inline Adv_SCS.

 # Strengthening the post-condition so that equal produces the correct subgoal.
 conseq post: Cla[Find1=Find2 ∧ G1=G2 ∧ is_puncture1=is_puncture2 ∧ S1=S2].
  simp!.

 equal.
  simp!.
  inline Count.
  inline queryGPuncturedS.
  inline queryG.
  wp right.
  equal all.
   simp!.
  skip.
  simp!.

 conseq post: ℭ𝔩𝔞[Find1 = Find2 ∧ G1 = G2 ∧ is_puncture1 = is_puncture2 ∧ S1 = S2 ∧ in_cstar1 = in_cstar2 ∧ in_pk1 = in_pk2 ∧ classA1 = classA2 ∧ b1 = b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Find to before G
 swap right 8-8 2-7.

 # in_pk, in_cstar, S
 # cstar1
 # pk2
 wp 4 4.
simp.
 conseq post: ℭ𝔩𝔞[b1=b2 & is_puncture1=is_puncture2 & mstar1=mstar2 & pk1=pk2 & rstar1=rstar2 & classA1=classA2 & G1=G2 & Find1=Find2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # rstar
 rnd.
 # mstar
 rnd.
 # pk,sk
 rnd.
 # G
 rnd.
 conseq post: ℭ𝔩𝔞[b1 = b2 ∧ is_puncture1 = is_puncture2 ∧ classA1 = classA2 ∧ Find1 = Find2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # count2, Find
 wp 1 2.
 conseq post: ℭ𝔩𝔞[b1 = b2 ∧ is_puncture1 = is_puncture2 ∧ classA1 = classA2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 skip.
 simp! divide_tmp_Gout.
qed.
