include "game1FO_goodbad.qrhl".
include "game1FO_goodbad_o2h_right.qrhl".

# GRAPH: EQ("game1FO_goodbad_o2h_right","game1FO_goodbad","game1FO_goodbad_o2h_right")
lemma game1FO_goodbad_o2h_right: Pr[b=1: game1FO_goodbad(rho)] = Pr[b=1: game1FO_goodbad_o2h_right(rho)].
 byqrhl.
 inline game1FO_goodbad.
 inline game1FO_goodbad_o2h_right.
 inline Adv_O2H_Game1FO.

 # for equal
 conseq post: Cla[b1=b2 & G1=G'2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Adv_INDCCA_encFO
 seq <-> 18 16: ℭ𝔩𝔞[G1 = G'2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ in_pk1 = in_pk2 ∧ in_cstar1 = in_cstar2 ∧ Kstar1 = Kstar2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ pk1 = pk2 ∧ cstar1 = cstar2 ∧ sk1 = sk2 ∧ m'1 = m'2 ∧ Hr1 = Hr2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
 equal.
  simp!.
  # queryG ~ Count(queryG')
  inline Count.
  inline queryG.
  inline queryG'.
  wp right.
  rename right: G' -> G.
  equal.
   simp!.
   skip.
   simp!.
  skip.
  simp!.

 # cstar, Kstar, in_pk, in_cstar, gin, gout
 equal 6.
  simp!.
 conseq post: ℭ𝔩𝔞[G1 = G'2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ pk1 = pk2 ∧ sk1 = sk2 ∧ m'1 = m'2 ∧ Hr1 = Hr2 & mstar1=mstar2 & gout1=gout2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.
 
 # ClassicalQueryG(...)
 seq<-> 11 9: ℭ𝔩𝔞[gin1 = gin2 ∧ gout1 = gout2 ∧ G1 = G'2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ pk1 = pk2 ∧ sk1 = sk2 ∧ m'1 = m'2 ∧ Hr1 = Hr2 ∧ mstar1 = mstar2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
 equal.
  simp!.
  # queryG ~ Count(queryG')
  inline Count.
  inline queryG.
  inline queryG'.
  wp right.
  rename right: G' -> G.
  equal.
   simp!.
   skip.
   simp!.
  skip.
  simp!.

 # gin, mstar
 wp 1 1.
 rnd.
 conseq post: ℭ𝔩𝔞[gout1 = gout2 ∧ G1 = G'2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ pk1 = pk2 ∧ sk1 = sk2 ∧ m'1 = m'2 ∧ Hr1 = Hr2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # move Hr,H0,Hq,prfk on right side to beginning
 swap right 4-7 1-3.

 # move pk,sk on left side before Ggood
 swap left 5-5 4-4.

 # pk2, sk2
 wp right.
 conseq post: ℭ𝔩𝔞[gout1 = gout2 ∧ G1 = G'2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ pk1 = fst z'2 ∧ sk1 = snd z'2 ∧ m'1 = m'2 ∧ Hr1 = Hr2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! prod_eq_iff.

 # S, Ggood1, Gbad1, G, z', pk1, sk1, z'2
 squash left.
 squash left.
 squash left.
 squash left.

 simp * G_goodbad_o2h_squash_def[symmetric].

 rnd ((pk,sk),Ggood,Gbad,S,G), (S,G,G',z') <- goodbad_o2h_distr_ext.

 conseq post: ℭ𝔩𝔞[gout1 = gout2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ m'1 = m'2 ∧ Hr1 = Hr2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! goodbad_o2h_distr_ext_relationships prod_eq_iff.

 # count2, prfk
 wp 1 2.
 conseq post: ℭ𝔩𝔞[gout1 = gout2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Hq1 = Hq2 ∧ H01 = H02 ∧ m'1 = m'2 ∧ Hr1 = Hr2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Hr, H0, Hq
 rnd.
 rnd.
 rnd.
 conseq post: ℭ𝔩𝔞[gout1 = gout2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ m'1 = m'2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 skip.
 simp!.
qed.
