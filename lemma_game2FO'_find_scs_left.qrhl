# Autogenerated file (by replacing game0FO -> game0FO', game1FO -> game1FO', etc. etc. in lemma_game2FO_find_scs_left.qrhl)

# Autogenerated file (by replacing game1FO' -> game2FO', decapsQuery1 -> decapsQuery2 in lemma_game1FO'_find_scs_left.qrhl)

include "game2FO'_goodbad_o2h_find.qrhl".
include "game2FO'_goodbad_scs_left.qrhl".

# GRAPH: EQ("game2FO'_find_scs_left","game2FO'_goodbad_o2h_find","game2FO'_goodbad_scs_left")
lemma game2FO'_find_scs_left: Pr[Find : game2FO'_goodbad_o2h_find(rho)] = Pr[Find : game2FO'_goodbad_scs_left(rho)].
 byqrhl.
 inline game2FO'_goodbad_o2h_find.
 inline game2FO'_goodbad_scs_left.

 equal.
  simp!.

 # Find
 wp 1 1.
 conseq post: Cla[z'1 = z'2 ‚àß gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß Kstar1 = Kstar2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß m'1 = m'2 ‚àß count1 = count2 ‚àß S1 = S2 ‚àß is_puncture1 = is_puncture2 ‚àß G1 = G2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp!.
 
 rnd (S,G,G',z'), (S,G,z') <- map_distr (Œª(S,G,G',z'). ((S,G,G',z'),(S,G,z'))) goodbad_o2h_distr.

 conseq post: Cla[gout1 = gout2 ‚àß cstar1 = cstar2 ‚àß Kstar1 = Kstar2 ‚àß in_pk1 = in_pk2 ‚àß in_cstar1 = in_cstar2 ‚àß classA1 = classA2 ‚àß b1 = b2 ‚àß m'1 = m'2 ‚àß count1 = count2 ‚àß is_puncture1 = is_puncture2] ‚äì ‚ü¶quantA1‚üß ‚â°ùîÆ ‚ü¶quantA2‚üß.
  simp! map_distr_goodbad_o2h_distr_goodbad_scs_distr case_prod_beta.

 wp 1 1.
 skip.
 simp!.
qed.
