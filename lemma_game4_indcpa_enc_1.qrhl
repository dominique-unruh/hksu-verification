include "game4.qrhl".
include "indcpa_enc_1.qrhl".

# GRAPH: EQ("game4_indcpa_enc_1","game4","indcpa_enc_1")
lemma game4_indcpa_enc_1: Pr[Find : game4(rho)] = Pr[b=1 : indcpa_enc_1(rho)].
 byqrhl.
 inline game4.
 inline indcpa_enc_1.
 inline Adv_INDCPA_enc_2.
 inline Adv_INDCPA_enc_1.

 wp right.
 conseq post: Cla[Find1=Find2].
  simp!.

 equal.
  simp!.
 conseq post: ℭ𝔩𝔞[in_cstar1 = in_cstar2 ∧ in_pk1 = in_pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ S1 = S2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Find to beginning
 swap right 12-12 1-11.

 # S, in_pk, in_cstar
 wp 3 3.
 conseq post: ℭ𝔩𝔞[cstar1 = cstar2 ∧ pk1 = pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ mstar1 = mstar2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # cstar1
 wp left.
 # rstar1,cstar2
 rnd rstar,cstar <- map_distr (λr. (r, encr () pk2 m1star2 r)) (uniform UNIV).

 conseq post: ℭ𝔩𝔞[mstar1=m1star2 & cstar1 = cstar2 ∧ pk1 = pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ mstar1 = mstar2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! enc_def.

 # m0star,m1star (force_into)
 wp right 2.
 conseq post: ℭ𝔩𝔞[mstar1 = m1star2 & mstar1=mstar2 & {m1star2,m0star2} ⊆ msg_space() & cstar1 = cstar2 ∧ pk1 = pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! force_into_good.

 # m0star,m1star
 wp right 2.
 conseq post: ℭ𝔩𝔞[mstar1 = mstar2 & mstar2 ∈ msg_space() & cstar1 = cstar2 ∧ pk1 = pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # mstar
 rnd.

 conseq post: ℭ𝔩𝔞[cstar1 = cstar2 ∧ pk1 = pk2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Move G2 after Find
 swap right 4-4 2-3.

 # in_pk2
 wp right.

 # pk,sk
 rnd.
 # G
 rnd.
 # Find
 wp 1 1.
 skip.
 simp!.
qed.
