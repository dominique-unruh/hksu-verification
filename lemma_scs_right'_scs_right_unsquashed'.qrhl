# Autogenerated file (by replacing Adv_DS_encT -> Adv_DS_encT', etc. etc. in lemma_scs_right_scs_right_unsquashed.qrhl)

include "scs_right'.qrhl".
include "scs_right_unsquashed'.qrhl".

# GRAPH: EQ("scs_right'_scs_right_unsquashed'","scs_right'","scs_right_unsquashed'")
lemma scs_right'_scs_right_unsquashed': Pr[guess∈S:scs_right'(rho)] = Pr[guess∈S:scs_right_unsquashed'(rho)].
 rule sym.
 byqrhl.
 inline scs_right_unsquashed'.
 inline scs_right'.

 equal.
  simp!.

 conseq post: ℭ𝔩𝔞[S1=S2 ∧ z1 = z2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ count1 = count2 ∧ stop_at1 = stop_at2 ∧ guess1 = guess2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 squash left.
 squash left.
 squash left.
 squash left.
 squash left.

 simp * scs_distr0_def_sym.

 rnd (G,(pk,sk),mstar,rstar,z,S), (S,G,z) <- 
   map_distr (λ(G,(pk,sk),mstar,rstar,z,S). ((G,(pk,sk),mstar,rstar,z,S), (S,G,z))) scs_distr0.
 conseq post: ℭ𝔩𝔞[classA1 = classA2 ∧ b1 = b2 ∧ count1 = count2 ∧ stop_at1 = stop_at2 ∧ guess1 = guess2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! scs_distr_def case_prod_beta_abs_def.

 # stop_at
 rnd.
 # count
 wp 1 1.
 skip.
 simp!.
qed.
