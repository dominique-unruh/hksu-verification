include "o2h_find_unsquashed.qrhl".
include "o2h_find.qrhl".


# GRAPH: EQ("o2h_find_unsquashed","o2h_find","o2h_find_unsquashed")
lemma o2h_find_unsquashed: Pr[Find:o2h_find(rho)] = Pr[Find:o2h_find_unsquashed(rho)].
 byqrhl.
 inline o2h_find.
 inline o2h_find_unsquashed.

 # Adv_O2H
 equal.
  simp!.

 # Find
 wp 1 1.
 conseq post: ℭ𝔩𝔞[z1 = z2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ count1 = count2 ∧ S1 = S2 ∧ is_puncture1 = is_puncture2 ∧ G1 = G2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # squash G,pk,sk,mstar,rstar,G',z,S
 squash right.
 squash right.
 squash right.
 squash right.
 squash right.
 squash right.

 simp * o2h_distr0_def_sym.

 rnd (S,G,G',z), (G,(pk,sk),mstar,rstar,G',z,S) <- 
   map_distr (λ(G,(pk,sk),mstar,rstar,G',z,S). ((S,G,G',z), (G,(pk,sk),mstar,rstar,G',z,S))) o2h_distr0.

 conseq post: ℭ𝔩𝔞[count1 = count2 ∧ is_puncture1 = is_puncture2 ∧ Find1 = Find2 ∧ classA1 = classA2 ∧ b1 = b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! o2h_distr_def case_prod_beta_abs_def.
 
 wp 1 1.
 skip.
 simp!.
qed.
