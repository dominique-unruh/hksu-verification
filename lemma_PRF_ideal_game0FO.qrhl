include "game0FO.qrhl".
include "PRF_ideal.qrhl".
include "lemma_decapsQueryRF_decapsQuery0.qrhl".

# GRAPH: EQ("PRF_ideal_game0FO", "PRF_ideal", "game0FO", uses="decapsQueryRF_decapsQuery0")
lemma PRF_ideal_game0FO: Pr[b=1:PRF_ideal(rho)] = Pr[b=1:game0FO(rho)].
 byqrhl qvars quantA.
 inline PRF_ideal.
 inline game0FO.
 inline Adv_PRF.

 conseq pre: Cla[classA1=classA2 & b1=b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 local up.
 local remove left.
  simp!.

 # Specifying the invariant for equal.
 conseq post: ℭ𝔩𝔞[pk1=pk2 & sk1=sk2 & cstar1=cstar2 & G1=G2 & H1=H2 & RF1=Hr2 & b1=b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 equal mid quantA, Hin, Hout, Gin, Gout.
  simp!.

  conseq post: (ℭ𝔩𝔞[pk1=pk2 & sk1=sk2 & cstar1=cstar2 & G1=G2 & H1=H2 & RF1=Hr2 & c1=c2 & K'1=K'2] ⊓ ⟦quantA1, Hin1, Hout1, Gin1, Gout1⟧ ≡𝔮 ⟦quantA2, Hin2, Hout2, Gin2, Gout2⟧) ⊓ Cla[in_cstar1=in_cstar2 & Kstar1=Kstar2 & classA1=classA2 & b1=b2 & in_pk1=in_pk2].
   simp!.
  conseq pre: (ℭ𝔩𝔞[pk1=pk2 & sk1=sk2 & cstar1=cstar2 & G1=G2 & H1=H2 & RF1=Hr2 & c1=c2 & K'1=K'2] ⊓ ⟦quantA1, Hin1, Hout1, Gin1, Gout1⟧ ≡𝔮 ⟦quantA2, Hin2, Hout2, Gin2, Gout2⟧) ⊓ Cla[in_cstar1=in_cstar2 & Kstar1=Kstar2 & classA1=classA2 & b1=b2 & in_pk1=in_pk2].
   simp!.
  frame.
   simp!.
  conseq qrhl: decapsQueryRF_decapsQuery0.
   simp!.
   simp!.

 conseq post: ℭ𝔩𝔞[pk1 = pk2 ∧ sk1 = sk2 ∧ cstar1 = cstar2 ∧ RF1 = Hr2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ in_pk1 = in_pk2 ∧ in_cstar1 = in_cstar2 ∧ Kstar1 = Kstar2 ∧ G1 = G2 ∧ H1 = H2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # in_pk, in_cstar
 wp 2 2.
 conseq post: ℭ𝔩𝔞[pk1 = pk2 ∧ sk1 = sk2 ∧ cstar1 = cstar2 ∧ RF1 = Hr2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ Kstar1 = Kstar2 ∧ G1 = G2 ∧ H1 = H2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp!.

 # Kstar, cstar, mstar2
 # ONLY PRIME: rnd.
 # ONLY PRIME: simp.
 squash right.
 # ONLY NON PRIME:
 squash right.
 # ONLY NON PRIME:
 rnd (Kstar,cstar), (mstar,cstar,Kstar) <- map_distr (λ(m,c,K). ((K,c),(m,c,K))) (map_distr (λd. (d, encrT G2 pk2 d, H2 d)) (uniform (msg_spaceT G2))).
 # ONLY PRIME: rnd (Kstar,cstar), (mstar,cstar) <- map_distr (λ(m,c,K). ((K,c),(m,c))) (map_distr (λd. (d, encrT G2 pk2 d, H2 d)) (uniform (msg_spaceT G2))).
 
 conseq post: ℭ𝔩𝔞[pk1 = pk2 ∧ sk1 = sk2 ∧ RF1 = Hr2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ G1 = G2 ∧ H1 = H2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! encapsFO_def encapsrFO_def.

 # pk,sk1,skfo2
 rnd (pk,sk), (pk,skfo) <-
   map_distr (λ(pk,skfo). ((pk,fst skfo), (pk,skfo))) (keygenFO (G2, H2)).

 conseq post: ℭ𝔩𝔞[RF1 = Hr2 ∧ classA1 = classA2 ∧ b1 = b2 ∧ G1 = G2 ∧ H1 = H2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! case_prod_beta.

 # move Hr to beginning
 swap right 2-2 1.

 # G,H
 squash right.
 rnd.

 conseq post: ℭ𝔩𝔞[RF1 = Hr2 ∧ classA1 = classA2 ∧ b1 = b2] ⊓ ⟦quantA1⟧ ≡𝔮 ⟦quantA2⟧.
  simp! paramsFO_def.

 # RF1 Hr2
 rnd.
 skip.
 simp!.
qed.
